"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.successResponse = exports.errorResponse = exports.callCfn = void 0;
const https = require("https");
const url = require("url");
exports.callCfn = async (body, cfnUrl) => {
    const parsedUrl = url.parse(cfnUrl);
    const options = {
        hostname: parsedUrl.hostname,
        port: 443,
        path: parsedUrl.path,
        method: "PUT",
        headers: {
            "content-type": "application/json",
            "content-length": JSON.stringify(body).length,
        },
    };
    console.info("SENDING RESPONSE...");
    return new Promise((resolve, reject) => {
        const request = https.request(options, (response) => {
            console.info("STATUS", response.statusCode);
            console.info("HEADERS", response.headers);
            resolve(response);
        });
        request.on("error", (error) => {
            console.info("sendResponse Error:" + error);
            reject(error);
        });
        request.write(JSON.stringify(body));
        request.end();
    });
};
exports.errorResponse = async (message, { cfnUrl, cfnStackId, cfnRequestId, logicalResourceId }) => {
    await exports.callCfn({
        "Status": "FAILED",
        "Reason": message,
        "PhysicalResourceId": logicalResourceId,
        "StackId": cfnStackId,
        "RequestId": cfnRequestId,
        "LogicalResourceId": logicalResourceId,
    }, cfnUrl);
};
exports.successResponse = async ({ cfnUrl, cfnStackId, cfnRequestId, logicalResourceId }) => {
    await exports.callCfn({
        "Status": "SUCCESS",
        "PhysicalResourceId": logicalResourceId,
        "StackId": cfnStackId,
        "RequestId": cfnRequestId,
        "LogicalResourceId": logicalResourceId,
    }, cfnUrl);
};
exports.handler = async (event) => {
    console.info('EVENT', event);
    const { ResponseURL: cfnUrl, StackId: cfnStackId, RequestId: cfnRequestId, LogicalResourceId: logicalResourceId, } = event.ExecutionInput;
    const errors = [];
    const lambdaResults = event.IntegrationTestResults;
    const parallelSuccess = Array.isArray(lambdaResults);
    if (!parallelSuccess)
        return exports.errorResponse("Execution error in parallel state", {
            cfnUrl, cfnStackId, cfnRequestId, logicalResourceId
        });
    lambdaResults.map((result) => {
        if (!result.success)
            errors.push(result.testName);
    });
    if (errors.length)
        return exports.errorResponse(`Tests failed: [${errors.join(', ')}]`, {
            cfnUrl, cfnStackId, cfnRequestId, logicalResourceId
        });
    return exports.successResponse({ cfnUrl, cfnStackId, cfnRequestId, logicalResourceId });
};
//# sourceMappingURL=data:application/json;base64,