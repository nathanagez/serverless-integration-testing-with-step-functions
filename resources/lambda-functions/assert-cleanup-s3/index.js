"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const AWS = require("aws-sdk");
const s3 = new AWS.S3();
const REQUIRED_ENVS = [
    "INPUT_BUCKET"
];
const errorResponse = (message) => {
    return {
        "success": false,
        "testName": "s3 upload",
        "errorMessage": message,
    };
};
const cleanUpWithSuccessResponse = async (key) => {
    // @ts-ignore
    await s3.deleteObject({
        Bucket: process.env.INPUT_BUCKET,
        Key: key
    }).promise();
    return { "success": true, "testName": "s3-upload" };
};
const cleanUpWithErrorResponse = async (key) => {
    // @ts-ignore
    await s3.deleteObject({
        Bucket: process.env.INPUT_BUCKET,
        Key: key
    }).promise();
    return errorResponse('Missing metadata');
};
exports.handler = async (event) => {
    console.info("EVENT", event);
    const missing = REQUIRED_ENVS.filter(envName => !process.env[envName]);
    if (missing.length) {
        throw new Error(`Missing environment variables: ${missing.join(', ')}`);
    }
    if (!event.arrangeActPayload.actSuccess)
        return errorResponse(event.arrangeActPayload.errorMessage || "Unknown error");
    try {
        const { testObjectKey = "" } = event.arrangeActPayload;
        // @ts-ignore
        const result = await s3.getObject({
            Bucket: process.env.INPUT_BUCKET,
            Key: testObjectKey,
        }).promise();
        if (!result.Metadata)
            return cleanUpWithErrorResponse(testObjectKey);
        return cleanUpWithSuccessResponse(testObjectKey);
    }
    catch (e) {
        return {
            "actSuccess": false,
            "errorMessage": "failed to put object",
        };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBOEI7QUFDOUIsTUFBTSxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUM7QUFVeEIsTUFBTSxhQUFhLEdBQUc7SUFDbEIsY0FBYztDQUNqQixDQUFBO0FBRUQsTUFBTSxhQUFhLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBRTtJQUN0QyxPQUFPO1FBQ0gsU0FBUyxFQUFFLEtBQUs7UUFDaEIsVUFBVSxFQUFFLFdBQVc7UUFDdkIsY0FBYyxFQUFFLE9BQU87S0FDMUIsQ0FBQTtBQUNMLENBQUMsQ0FBQTtBQUVELE1BQU0sMEJBQTBCLEdBQUcsS0FBSyxFQUFFLEdBQVcsRUFBRSxFQUFFO0lBQ3JELGFBQWE7SUFDYixNQUFNLEVBQUUsQ0FBQyxZQUFZLENBQUM7UUFDbEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWTtRQUNoQyxHQUFHLEVBQUUsR0FBRztLQUNYLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNaLE9BQU8sRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUMsQ0FBQTtBQUNyRCxDQUFDLENBQUE7QUFFRCxNQUFNLHdCQUF3QixHQUFHLEtBQUssRUFBRSxHQUFXLEVBQUUsRUFBRTtJQUNuRCxhQUFhO0lBQ2IsTUFBTSxFQUFFLENBQUMsWUFBWSxDQUFDO1FBQ2xCLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVk7UUFDaEMsR0FBRyxFQUFFLEdBQUc7S0FDWCxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDWixPQUFPLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0FBQzVDLENBQUMsQ0FBQTtBQUVZLFFBQUEsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFZLEVBQUUsRUFBRTtJQUMxQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUM1QixNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFDdEUsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0tBQzFFO0lBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVO1FBQ25DLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLElBQUksZUFBZSxDQUFDLENBQUE7SUFFakYsSUFBSTtRQUNBLE1BQU0sRUFBQyxhQUFhLEdBQUcsRUFBRSxFQUFDLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDO1FBQ3JELGFBQWE7UUFDYixNQUFNLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUM7WUFDOUIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWTtZQUNoQyxHQUFHLEVBQUUsYUFBYTtTQUNyQixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVE7WUFDaEIsT0FBTyx3QkFBd0IsQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUNsRCxPQUFPLDBCQUEwQixDQUFDLGFBQWEsQ0FBQyxDQUFBO0tBQ25EO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixPQUFPO1lBQ0gsWUFBWSxFQUFFLEtBQUs7WUFDbkIsY0FBYyxFQUFFLHNCQUFzQjtTQUN6QyxDQUFBO0tBQ0o7QUFDTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBV1MgZnJvbSBcImF3cy1zZGtcIlxuY29uc3QgczMgPSBuZXcgQVdTLlMzKCk7XG5cbmludGVyZmFjZSBFdmVudCB7XG4gICAgYXJyYW5nZUFjdFBheWxvYWQ6IHtcbiAgICAgICAgYWN0U3VjY2VzczogYm9vbGVhbjtcbiAgICAgICAgZXJyb3JNZXNzYWdlPzogc3RyaW5nO1xuICAgICAgICB0ZXN0T2JqZWN0S2V5Pzogc3RyaW5nO1xuICAgIH1cbn1cblxuY29uc3QgUkVRVUlSRURfRU5WUyA9IFtcbiAgICBcIklOUFVUX0JVQ0tFVFwiXG5dXG5cbmNvbnN0IGVycm9yUmVzcG9uc2UgPSAobWVzc2FnZTogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgXCJzdWNjZXNzXCI6IGZhbHNlLFxuICAgICAgICBcInRlc3ROYW1lXCI6IFwiczMgdXBsb2FkXCIsXG4gICAgICAgIFwiZXJyb3JNZXNzYWdlXCI6IG1lc3NhZ2UsXG4gICAgfVxufVxuXG5jb25zdCBjbGVhblVwV2l0aFN1Y2Nlc3NSZXNwb25zZSA9IGFzeW5jIChrZXk6IHN0cmluZykgPT4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBhd2FpdCBzMy5kZWxldGVPYmplY3Qoe1xuICAgICAgICBCdWNrZXQ6IHByb2Nlc3MuZW52LklOUFVUX0JVQ0tFVCxcbiAgICAgICAgS2V5OiBrZXlcbiAgICB9KS5wcm9taXNlKClcbiAgICByZXR1cm4ge1wic3VjY2Vzc1wiOiB0cnVlLCBcInRlc3ROYW1lXCI6IFwiczMtdXBsb2FkXCJ9XG59XG5cbmNvbnN0IGNsZWFuVXBXaXRoRXJyb3JSZXNwb25zZSA9IGFzeW5jIChrZXk6IHN0cmluZykgPT4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBhd2FpdCBzMy5kZWxldGVPYmplY3Qoe1xuICAgICAgICBCdWNrZXQ6IHByb2Nlc3MuZW52LklOUFVUX0JVQ0tFVCxcbiAgICAgICAgS2V5OiBrZXlcbiAgICB9KS5wcm9taXNlKClcbiAgICByZXR1cm4gZXJyb3JSZXNwb25zZSgnTWlzc2luZyBtZXRhZGF0YScpXG59XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgIGNvbnNvbGUuaW5mbyhcIkVWRU5UXCIsIGV2ZW50KVxuICAgIGNvbnN0IG1pc3NpbmcgPSBSRVFVSVJFRF9FTlZTLmZpbHRlcihlbnZOYW1lID0+ICFwcm9jZXNzLmVudltlbnZOYW1lXSlcbiAgICBpZiAobWlzc2luZy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGVudmlyb25tZW50IHZhcmlhYmxlczogJHttaXNzaW5nLmpvaW4oJywgJyl9YClcbiAgICB9XG4gICAgaWYgKCFldmVudC5hcnJhbmdlQWN0UGF5bG9hZC5hY3RTdWNjZXNzKVxuICAgICAgICByZXR1cm4gZXJyb3JSZXNwb25zZShldmVudC5hcnJhbmdlQWN0UGF5bG9hZC5lcnJvck1lc3NhZ2UgfHwgXCJVbmtub3duIGVycm9yXCIpXG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7dGVzdE9iamVjdEtleSA9IFwiXCJ9ID0gZXZlbnQuYXJyYW5nZUFjdFBheWxvYWQ7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgczMuZ2V0T2JqZWN0KHtcbiAgICAgICAgICAgIEJ1Y2tldDogcHJvY2Vzcy5lbnYuSU5QVVRfQlVDS0VULFxuICAgICAgICAgICAgS2V5OiB0ZXN0T2JqZWN0S2V5LFxuICAgICAgICB9KS5wcm9taXNlKCk7XG4gICAgICAgIGlmICghcmVzdWx0Lk1ldGFkYXRhKVxuICAgICAgICAgICAgcmV0dXJuIGNsZWFuVXBXaXRoRXJyb3JSZXNwb25zZSh0ZXN0T2JqZWN0S2V5KVxuICAgICAgICByZXR1cm4gY2xlYW5VcFdpdGhTdWNjZXNzUmVzcG9uc2UodGVzdE9iamVjdEtleSlcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcImFjdFN1Y2Nlc3NcIjogZmFsc2UsXG4gICAgICAgICAgICBcImVycm9yTWVzc2FnZVwiOiBcImZhaWxlZCB0byBwdXQgb2JqZWN0XCIsXG4gICAgICAgIH1cbiAgICB9XG59Il19